/* CMSC 235, Nolan Winkler */

/* My first database: Albums of 2015 */

I created a database of many of the albums released, or scheduled to be released in 2015, as I have fallen behind on music this year with school and all. 

I mainly used this Wikipedia page "(http://en.wikipedia.org/wiki/List_of_2015_albums)" and, for the albums I was actually interested in that have come out, their Wikipedia pages to get their track lists. I used Google Spreadsheets' importHTML function to get out the relevant tables in a nicer format.

First, I made the simplifying assumptions that each album primarily stars just one artist (so anybody who was featured on that album didn't count towards the album's artist, although they did count on the invidual songs). This ran into one issue, as Ghostface Killah and BBNG did a joint album this year, which I dealt with by just assuming they temporarily formed the group "Ghostface Killah & BBNG" rather than creating two entries crediting each of them individually, which also would have been valid. I also made the simplfying assumption that each song only belongs on one album, which could have run into issues if there was like a "Now that's what I call music" compilation album on here, but there wasn't, so that worked out well. 

As mentioned before, I dealt with artists being featured on songs by representing artists to songs as a many-to-many relationship instead of a one-to-many relationship as the above two are. This did require some scraping of the data to get out the "(feat. other artist)" strings from the song titles and creating new artists based on that, but it wasn't too bad. 

One thing I noticed is that there could have essentially been two paths from an artist to a song, as it could be that the artist has an album and that song is on that album, or an artist was featured on a song on somebody else's album. I was unsure whether the right design choice would have been to make a join table that connected featured artists to songs, like I did, (since it was simpler for me as I like being lazy, and this means there is only one unique path in our schema representation to get from one artist to one song) or if I should have simply made an artist to songs table, and allowed the primary artist to be connected to the song in that way too (which would make it easier to just spit out all of the artists who worked on a given song, but would make two paths in our schema representation from one artist to the same song).
