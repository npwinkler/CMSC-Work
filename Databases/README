/* Albums of 2015 Database for CMSC 235 */

I created a database of many of the albums released, or scheduled to be released in 2015, as I have fallen behind on music this year with school and all. 

I mainly used this Wikipedia page "(http://en.wikipedia.org/wiki/List_of_2015_albums)" and, for the albums I was actually interested in that have come out, their Wikipedia pages to get their track lists. I used Google Spreadsheets' importHTML function to get out the relevant tables in a nicer format.

First, I made the simplifying assumptions that each album primarily stars just one artist (so anybody who was featured on that album didn't count towards the album's artist, although they did count on the invidual songs). This ran into one issue, as Ghostface Killah and BBNG did a joint album this year, which I could have dealt with by just assuming they temporarily formed the group "Ghostface Killah & BBNG" rather than creating two entries crediting each of them individually, but figured if I were to keep this up throughout the year, either BBNG or Ghostface Killah could release another album and I'd want to see both of them without remembering about joint albums. So, I changed that relationship to be many albums to many artists. I then also did not make the simplfying assumption that each song only belongs on one album, as that could have run into issues if there was like a "Now that's what I call music" compilation album on here, but there isn't, so having a join table there now was unnecessary, but if there is a "Kidz Bop" album featuring "Wesley's Theory" by Kendrick Lamar that comes out this year, you best believe I'm gonna grab that, yo. Also, if I wanted to find what song an album was on, I might want to see both of them, as I could theoretically be looking for another song as an album I can't rememember, but I can remember a different song on that album.

As mentioned before, I dealt with artists being featured on songs by representing artists to songs as a many-to-many relationship instead of a one-to-many relationship as the above two are. This did require some scraping of the data to get out the "(feat. other artist)" strings from the song titles and creating new artists based on that, but it wasn't too bad. 

One thing I noticed is that there could have essentially been two paths from an artist to a song, as it could be that the artist has an album and that song is on that album, or an artist was featured on a song on somebody else's album. I was unsure whether the right design choice would have been to make a join table that connected featured artists to songs, like I did, (since it was simpler for me and this means there is only one unique path in our schema representation to get from one artist to one song) or if I should have simply made a join table thar connected all artist to songs, and allowed the primary artist to be connected to the song in that way too (which would make it easier to just spit out all of the artists who worked on a given song, or all the songs that an artist worked on this year, but would make two paths in our schema representation from one artist to the same song). Any input on this would be appreciated. I could see the argument that doing a table of all artists to songs could be better because then if an artist has both an album this year and is featured on another artist's album this year (as was the case for the one and only Mr. Snoop Dogg), we would be able to more easily print out all of the songs that artist has put out this year, but I mostly prefer to listen to music in album rather than single format anyway and thus when I'm looking up stuff about an artist, I would rather see all of their primary stuff and not care if they were sampled/featured on some weird project, like if Sufjan Stevens puts out another Sisyphus album instead of more Carrie and Lowell-type stuff. So, basically, I went for personal usage over general usage.

/* T-Shirt Sales Database Usage */
When ordering shirts for my house's t-shirt sales, I took a Google Poll, imported the data into a .csv so it could be read by sqlite and then made my life easier by finding out how many shirts of each color and size combination I needed to order that way.

/*Data Researcher/Analyst exam */
Here is an examination that I did about pulling/collecting data from a database using SQL, describing the process for standardizing that data, and identifying potential sources from which to get revelant data.
